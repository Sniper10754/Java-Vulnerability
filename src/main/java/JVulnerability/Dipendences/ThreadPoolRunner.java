package JVulnerability.Dipendences;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;

public class ThreadPoolRunner extends Thread {

    public final WorkerThread[] ThreadPool = new WorkerThread[8];

    public ThreadPoolRunner(String target, int start, int finish, int timeout) {

        int finish7 = finish / 2;
        int finish6 = finish / 4;
        int finish5 = finish / 8;
        int finish4 = finish / 10;
        int finish3 = finish / 12;
        int finish2 = finish / 14;
        int finish1 = finish / 16;

        ThreadPool[0] = new WorkerThread(target, start, finish1, timeout, false);
        ThreadPool[1] = new WorkerThread(target, finish1, finish2, timeout, false);
        ThreadPool[2] = new WorkerThread(target, finish2, finish3, timeout, false);
        ThreadPool[3] = new WorkerThread(target, finish3, finish4, timeout, false);
        ThreadPool[4] = new WorkerThread(target, finish4, finish5, timeout, false);
        ThreadPool[5] = new WorkerThread(target, finish5, finish6, timeout, false);
        ThreadPool[6] = new WorkerThread(target, finish6, finish7, timeout, false);
        ThreadPool[7] = new WorkerThread(target, finish7, finish, timeout, false);
        ThreadPool[0].setName("Thread-1");
        ThreadPool[1].setName("Thread-2");
        ThreadPool[2].setName("Thread-3");
        ThreadPool[3].setName("Thread-4");
        ThreadPool[4].setName("Thread-5");
        ThreadPool[5].setName("Thread-6");
        ThreadPool[6].setName("Thread-7");
        ThreadPool[7].setName("Thread-8");
    }

    @Override
    public void run() {
        int errors = 0;
        for (WorkerThread workerThread : ThreadPool) {
            try {
                workerThread.startScan();
            } catch (IllegalArgumentException e) {
                errors++;
            }
        }
        if (errors >= 1)
            System.err.println("Error: Some threads have got a wrong port.");

        for (WorkerThread workerThread : ThreadPool) {
            try {
                workerThread.join();
            } catch (InterruptedException ignored) {
            }
        }

    }

    public ArrayList<Integer> getResults() {
        ArrayList<ArrayList<Integer>> results = new ArrayList<>();
        ArrayList<Integer> resultsNumbers = new ArrayList<>();

        for (WorkerThread workerThread : ThreadPool) {
            results.add(workerThread.getResults());
        }

        for (ArrayList<Integer> array : results) {
            resultsNumbers.addAll(array);
        }

        return resultsNumbers;
    }

}
